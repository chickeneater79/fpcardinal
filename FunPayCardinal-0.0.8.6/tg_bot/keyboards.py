"""
–§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Å—É–±-–ø–∞–Ω–µ–ª–µ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

from __future__ import annotations
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from cardinal import Cardinal

from telebot.types import InlineKeyboardButton as B
from telebot import types

from tg_bot import utils, CBT, MENU_CFG
from tg_bot.utils import NotificationTypes

import Utils

import logging
import random
import os

logger = logging.getLogger("TGBot")


def power_off(instance_id: int, state: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞.

    :param instance_id: ID –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    :param state: —Ç–µ–∫—É—â–µ–π —ç—Ç–∞–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup()
    if state == 0:
        keyboard.row(B("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:1:{instance_id}"),
                     B("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN))
    elif state == 1:
        keyboard.row(B("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN),
                     B("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:2:{instance_id}"))
    elif state == 2:
        yes_button_num = random.randint(1, 10)
        yes_button = B("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:3:{instance_id}")
        no_button = B("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN)
        buttons = [*[no_button] * (yes_button_num - 1), yes_button, *[no_button] * (10 - yes_button_num)]
        keyboard.add(*buttons, row_width=2)
    elif state == 3:
        yes_button_num = random.randint(1, 30)
        yes_button = B("‚úÖ –î–∞", callback_data=f"{CBT.SHUT_DOWN}:4:{instance_id}")
        no_button = B("‚ùå –ù–µ—Ç", callback_data=CBT.CANCEL_SHUTTING_DOWN)
        buttons = [*[no_button] * (yes_button_num - 1), yes_button, *[no_button] * (30 - yes_button_num)]
        keyboard.add(*buttons, row_width=5)
    elif state == 4:
        yes_button_num = random.randint(1, 40)
        yes_button = B("‚ùå –ù–µ—Ç", callback_data=f"{CBT.SHUT_DOWN}:5:{instance_id}")
        no_button = B("‚úÖ –î–∞", callback_data=CBT.CANCEL_SHUTTING_DOWN)
        buttons = [*[yes_button] * (yes_button_num - 1), no_button, *[yes_button] * (40 - yes_button_num)]
        keyboard.add(*buttons, row_width=7)
    elif state == 5:
        keyboard.add(B("‚úÖ –î—ç", callback_data=f"{CBT.SHUT_DOWN}:6:{instance_id}"))
    return keyboard


def main_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π (CBT.CATEGORY:main).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :return: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .row(B(f"–ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoRaise']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:FunPay:autoRaise"),
             B(f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoResponse']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:FunPay:autoResponse")) \
        .row(B(f"–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoDelivery']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:FunPay:autoDelivery"),
             B(f"–ú—É–ª—å—Ç–∏-–≤—ã–¥–∞—á–∞ {utils.bool_to_text(cardinal.MAIN_CFG['FunPay'].getboolean('multiDelivery'))}",
               callback_data=f"{CBT.SWITCH}:FunPay:multiDelivery")) \
        .row(B(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoRestore']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:FunPay:autoRestore"),
             B(f"–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–æ–≤ {'üü¢' if int(cardinal.MAIN_CFG['FunPay']['autoDisable']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:FunPay:autoDisable")) \
        .add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def new_message_view_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(B(f"–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "
               f"{'üü¢' if int(cardinal.MAIN_CFG['NewMessageView']['includeMyMessages']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:NewMessageView:includeMyMessages")) \
        .add(B(f"–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è FunPay "
               f"{'üü¢' if int(cardinal.MAIN_CFG['NewMessageView']['includeFPMessages']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:NewMessageView:includeFPMessages")) \
        .add(B(f"–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ "
               f"{'üü¢' if int(cardinal.MAIN_CFG['NewMessageView']['includeBotMessages']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:NewMessageView:includeBotMessages")) \
        .add(B(f"–£–≤–µ–¥., –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –º–µ–Ω—è "
               f"{'üü¢' if int(cardinal.MAIN_CFG['NewMessageView']['notifyOnlyMyMessages']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:NewMessageView:notifyOnlyMyMessages")) \
        .add(B(f"–£–≤–µ–¥., –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç FP "
               f"{'üü¢' if int(cardinal.MAIN_CFG['NewMessageView']['notifyOnlyFPMessages']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:NewMessageView:notifyOnlyFPMessages")) \
        .add(B(f"–£–≤–µ–¥., –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –±–æ—Ç–∞ "
               f"{'üü¢' if int(cardinal.MAIN_CFG['NewMessageView']['notifyOnlyBotMessages']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:NewMessageView:notifyOnlyBotMessages")) \
        .add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN2))

    return keyboard


def old_users_settings(cardinal: Cardinal):
    keyboard = types.InlineKeyboardMarkup()\
        .add(B(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {utils.bool_to_text(cardinal.MAIN_CFG['Greetings'].getboolean('sendGreetings'))}",
               callback_data=f"{CBT.SWITCH}:Greetings:sendGreetings"))\
        .add(B(f"–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã {utils.bool_to_text(cardinal.MAIN_CFG['Greetings'].getboolean('cacheInitChats'))}",
               callback_data=f"{CBT.SWITCH}:Greetings:cacheInitChats"))\
        .add(B(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=CBT.EDIT_GREETINGS_TEXT))\
        .add(B(f"‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN2))
    return keyboard


def order_confirm_reply_settings(cardinal: Cardinal):
    keyboard = types.InlineKeyboardMarkup()\
        .add(B(f"–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {utils.bool_to_text(cardinal.MAIN_CFG['OrderConfirm'].getboolean('sendReply'))}",
               callback_data=f"{CBT.SWITCH}:OrderConfirm:sendReply")) \
        .add(B(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=CBT.EDIT_ORDER_CONFIRM_REPLY_TEXT)) \
        .add(B(f"‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN2))
    return keyboard


def review_reply_settings(cardinal: Cardinal):
    keyboard = types.InlineKeyboardMarkup()
    for i in range(1, 6):
        keyboard.row(B(f"{'‚≠ê'*i}{'¬†'*(10-i)}",
                       callback_data=f"{CBT.SEND_REVIEW_REPLY_TEXT}:{i}"),
                     B(f"{utils.bool_to_text(cardinal.MAIN_CFG['ReviewReply'].getboolean(f'star{i}Reply'))}",
                       callback_data=f"{CBT.SWITCH}:ReviewReply:star{i}Reply"),
                     B(f"‚úèÔ∏è",
                       callback_data=f"{CBT.EDIT_REVIEW_REPLY_TEXT}:{i}"))
    keyboard.add(B(f"‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN2))
    return keyboard


def notifications_settings(cardinal: Cardinal, chat_id: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (CBT.CATEGORY:telegram).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–∑–≤–∞–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    tg = cardinal.telegram
    keyboard = types.InlineKeyboardMarkup() \
        .row(B(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.new_message) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.new_message}"),
             B(f"–í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.command) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.command}")) \
        .row(B(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.new_order) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.new_order}"),
             B(f"–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.order_confirmed) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.order_confirmed}")) \
        .row(B(f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–∞ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.lots_restore) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.lots_restore}"),
             B("–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ª–æ—Ç–∞ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.lots_deactivate) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.lots_deactivate}")) \
        .row(B(f"–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.delivery) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.delivery}"),
             B(f"–ü–æ–¥–Ω—è—Ç–∏–µ –ª–æ—Ç–æ–≤ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.lots_raise) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.lots_raise}")) \
        .add(B(f"–û—Å—Ç–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.review) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.review}")) \
        .add(B(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.bot_start) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.bot_start}")) \
        .add(B(f"–ü—Ä–æ—á–µ–µ (–ø–ª–∞–≥–∏–Ω—ã) "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.other) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.other}")) \
        .add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def announcements_settings(cardinal: Cardinal, chat_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±—ä—è–≤–ª–µ–Ω–∏–π.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param chat_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–∑–≤–∞–Ω–∞ –¥–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.
    """
    tg = cardinal.telegram
    keyboard = types.InlineKeyboardMarkup() \
        .add(B(f"–û–±—ä—è–≤–ª–µ–Ω–∏—è "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.announcement) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.announcement}")) \
        .add(B(f"–†–µ–∫–ª–∞–º–∞ "
               f"{'üîî' if tg.is_notification_enabled(chat_id, NotificationTypes.ad) else 'üîï'}",
               callback_data=f"{CBT.SWITCH_TG_NOTIFICATIONS}:{chat_id}:{NotificationTypes.ad}"))
    return keyboard


def block_list_settings(cardinal: Cardinal) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (CBT.CATEGORY:blockList).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(B(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É "
               f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockDelivery']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:BlockList:blockDelivery")) \
        .add(B(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç "
               f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockResponse']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:BlockList:blockResponse")) \
        .add(B(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö "
               f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockNewMessageNotification']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:BlockList:blockNewMessageNotification")) \
        .add(B(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö "
               f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockNewOrderNotification']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:BlockList:blockNewOrderNotification")) \
        .add(B(f"–ù–µ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö "
               f"{'üü¢' if int(cardinal.MAIN_CFG['BlockList']['blockCommandNotification']) else 'üî¥'}",
               callback_data=f"{CBT.SWITCH}:BlockList:blockCommandNotification")) \
        .add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CBT.MAIN))
    return keyboard


def commands_list(cardinal: Cardinal, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ (CBT.CMD_LIST:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    """
    keyboard = types.InlineKeyboardMarkup()
    commands = cardinal.RAW_AR_CFG.sections()[offset: offset + MENU_CFG.AR_BTNS_AMOUNT]
    if not commands and offset != 0:
        offset = 0
        commands = cardinal.RAW_AR_CFG.sections()[offset: offset + MENU_CFG.AR_BTNS_AMOUNT]

    for index, cmd in enumerate(commands):
        #  CBT.EDIT_CMD:–Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:—Å–º–µ—â–µ–Ω–∏–µ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
        keyboard.add(B(cmd, callback_data=f"{CBT.EDIT_CMD}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.AR_BTNS_AMOUNT, len(commands),
                                            len(cardinal.RAW_AR_CFG.sections()), CBT.CMD_LIST)

    keyboard.add(B("ü§ñ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞", callback_data=f"{CBT.CATEGORY}:autoResponse")) \
        .add(B("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def edit_command(cardinal: Cardinal, command_index: int, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã (CBT.EDIT_CMD:<command_num>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param command_index: –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    """
    command = cardinal.RAW_AR_CFG.sections()[command_index]
    command_obj = cardinal.RAW_AR_CFG[command]
    keyboard = types.InlineKeyboardMarkup() \
        .add(B(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç",
               callback_data=f"{CBT.EDIT_CMD_RESPONSE_TEXT}:{command_index}:{offset}")) \
        .add(B(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
               callback_data=f"{CBT.EDIT_CMD_NOTIFICATION_TEXT}:{command_index}:{offset}")) \
        .add(B(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram "
               f"{utils.bool_to_text(command_obj.get('telegramNotification'), on='üîî', off='üîï')}",
               callback_data=f"{CBT.SWITCH_CMD_NOTIFICATION}:{command_index}:{offset}")) \
        .add(B("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É / —Å–µ—Ç –∫–æ–º–∞–Ω–¥", callback_data=f"{CBT.DEL_CMD}:{command_index}:{offset}")) \
        .row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CMD_LIST}:{offset}"),
             B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.EDIT_CMD}:{command_index}:{offset}"))
    return keyboard


def products_files_list(offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (CBT.PRODUCTS_FILES_LIST:<offset>).

    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.
    """
    keyboard = types.InlineKeyboardMarkup()
    files = os.listdir("storage/products")[offset:offset + MENU_CFG.PF_BTNS_AMOUNT]
    if not files and offset != 0:
        offset = 0
        files = os.listdir("storage/products")[offset:offset + 5]

    for index, name in enumerate(files):
        amount = Utils.cardinal_tools.count_products(f"storage/products/{name}")
        keyboard.add(B(f"{amount} —à—Ç., {name}", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.PF_BTNS_AMOUNT, len(files),
                                            len(os.listdir("storage/products")), CBT.PRODUCTS_FILES_LIST)

    keyboard.add(B("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery")) \
        .add(B("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def products_file_edit(file_number: int, offset: int, confirmation: bool = False) \
        -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (CBT.EDIT_PRODUCTS_FILE:<file_index>:<offset>).

    :param file_number: –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    :param confirmation: –≤–∫–ª—é—á–∏—Ç—å –ª–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(B("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
               callback_data=f"{CBT.ADD_PRODUCTS_TO_FILE}:{file_number}:{file_number}:{offset}:0")) \
        .add(B("‚§µÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.", callback_data=f"download_products_file:{file_number}:{offset}"))
    if not confirmation:
        keyboard.add(B("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data=f"del_products_file:{file_number}:{offset}"))
    else:
        keyboard.row(B("‚úÖ –î–∞", callback_data=f"confirm_del_products_file:{file_number}:{offset}"),
                     B("‚ùå –ù–µ—Ç", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_number}:{offset}"))
    keyboard.row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PRODUCTS_FILES_LIST}:{offset}"),
                 B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.EDIT_PRODUCTS_FILE}:{file_number}:{offset}"))
    return keyboard


def lots_list(cardinal: Cardinal, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ—Ç–æ–≤ (lots:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤.
    """
    keyboard = types.InlineKeyboardMarkup()
    lots = cardinal.AD_CFG.sections()[offset: offset + MENU_CFG.AD_BTNS_AMOUNT]
    if not lots and offset != 0:
        offset = 0
        lots = cardinal.AD_CFG.sections()[offset: offset + MENU_CFG.AD_BTNS_AMOUNT]

    for index, lot in enumerate(lots):
        keyboard.add(B(lot, callback_data=f"{CBT.EDIT_AD_LOT}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.AD_BTNS_AMOUNT, len(lots),
                                            len(cardinal.AD_CFG.sections()), CBT.AD_LOTS_LIST)

    keyboard.add(B("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery")) \
        .add(B("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def funpay_lots_list(cardinal: Cardinal, offset: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ—Ç–æ–≤ —Å FunPay (funpay_lots:<offset>).
    """
    keyboard = types.InlineKeyboardMarkup()
    lots = cardinal.tg_profile.get_lots()[offset: offset + MENU_CFG.FP_LOTS_BTNS_AMOUNT]
    if not lots and offset != 0:
        offset = 0
        lots = cardinal.tg_profile.get_lots()[offset: offset + MENU_CFG.FP_LOTS_BTNS_AMOUNT]

    for index, lot in enumerate(lots):
        keyboard.add(B(lot.description, callback_data=f"{CBT.ADD_AD_TO_LOT}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.FP_LOTS_BTNS_AMOUNT, len(lots),
                                            len(cardinal.tg_profile.get_lots()), CBT.FP_LOTS_LIST)

    keyboard.row(B("‚ûï –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"{CBT.ADD_AD_TO_LOT_MANUALLY}:{offset}"),
                 B("üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å FunPay", callback_data=f"update_funpay_lots:{offset}")) \
        .add(B("üì¶ –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏", callback_data=f"{CBT.CATEGORY}:autoDelivery")) \
        .add(B("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def edit_lot(cardinal: Cardinal, lot_number: int, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ—Ç–∞ (CBT.EDIT_AD_LOT:<lot_num>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param lot_number: –Ω–æ–º–µ—Ä –ª–æ—Ç–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤.
    """

    lot = cardinal.AD_CFG.sections()[lot_number]
    lot_obj = cardinal.AD_CFG[lot]
    file_name = lot_obj.get("productsFileName")
    kb = types.InlineKeyboardMarkup() \
        .add(B("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—ã–¥–∞—á–∏",
               callback_data=f"{CBT.EDIT_LOT_DELIVERY_TEXT}:{lot_number}:{offset}"))
    if not file_name:
        kb.add(B("‚õìÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
                 callback_data=f"{CBT.BIND_PRODUCTS_FILE}:{lot_number}:{offset}"))
    else:
        if file_name not in os.listdir("storage/products"):
            with open(f"storage/products/{file_name}", "w", encoding="utf-8"):
                pass
        file_number = os.listdir("storage/products").index(file_name)

        kb.row(B("‚õìÔ∏è –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏",
                 callback_data=f"{CBT.BIND_PRODUCTS_FILE}:{lot_number}:{offset}"),
               B("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
                 callback_data=f"{CBT.ADD_PRODUCTS_TO_FILE}:{file_number}:{lot_number}:{offset}:1"))

    params = {
        "ad": cardinal.MAIN_CFG["FunPay"].getboolean("autoDelivery"),
        "md": cardinal.MAIN_CFG["FunPay"].getboolean("multiDelivery"),
        "ares": cardinal.MAIN_CFG["FunPay"].getboolean("autoRestore"),
        "adis": cardinal.MAIN_CFG["FunPay"].getboolean("autoDisable"),
    }

    kb.row(B(f"–í—ã–¥–∞—á–∞ {utils.bool_to_text(lot_obj.get('disable'), 'üî¥', 'üü¢') if params['ad'] else '‚ö™'}",
             callback_data=f"{f'switch_lot:disable:{lot_number}:{offset}' if params['ad'] else CBT.PARAM_DISABLED}"),
           B(f"–ú—É–ª—å—Ç–∏–≤—ã–¥–∞—á–∞ {utils.bool_to_text(lot_obj.get('disableMultiDelivery'), 'üî¥', 'üü¢') if params['md'] else '‚ö™'}",
             callback_data=f"{f'switch_lot:disableMultiDelivery:{lot_number}:{offset}' if params['md'] else CBT.PARAM_DISABLED}")) \
        .row(B(f"–í–æ—Å—Å—Ç. {utils.bool_to_text(lot_obj.get('disableAutoRestore'), 'üî¥', 'üü¢') if params['ares'] else '‚ö™'}",
               callback_data=f"{f'switch_lot:disableAutoRestore:{lot_number}:{offset}' if params['ares'] else CBT.PARAM_DISABLED}"),
             B(f"–î–µ–∞–∫—Ç. {utils.bool_to_text(lot_obj.get('disableAutoDisable'), 'üî¥', 'üü¢') if params['adis'] else '‚ö™'}",
               callback_data=f"{f'switch_lot:disableAutoDisable:{lot_number}:{offset}' if params['adis'] else CBT.PARAM_DISABLED}")) \
        .row(B("üëæ –¢–µ—Å—Ç –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏", callback_data=f"test_auto_delivery:{lot_number}:{offset}"),
             B("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç", callback_data=f"{CBT.DEL_AD_LOT}:{lot_number}:{offset}")) \
        .row(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.AD_LOTS_LIST}:{offset}"),
             B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{CBT.EDIT_AD_LOT}:{lot_number}:{offset}"))
    return kb


# –ü—Ä–æ—á–µ–µ
def new_order(order_id: str, username: str, node_id: int,
              confirmation: bool = False, no_refund: bool = False) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.

    :param order_id: ID –∑–∞–∫–∞–∑–∞ (–±–µ–∑ #).
    :param username: –Ω–∏–∫–Ω–µ–π–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.
    :param node_id: ID —á–∞—Ç–∞ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.
    :param confirmation: –∑–∞–º–µ–Ω–∏—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏" –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "–î–∞" / "–ù–µ—Ç"?
    :param no_refund: —É–±—Ä–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–µ–Ω–µ–≥?
    """
    keyboard = types.InlineKeyboardMarkup()
    if not no_refund:
        if confirmation:
            keyboard.row(B(text="‚úÖ –î–∞", callback_data=f"{CBT.REFUND_CONFIRMED}:{order_id}:{node_id}:{username}"),
                         B(text="‚ùå –ù–µ—Ç", callback_data=f"{CBT.REFUND_CANCELLED}:{order_id}:{node_id}:{username}"))
        else:
            keyboard.add(B(text="üí∏ –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏",
                           callback_data=f"{CBT.REQUEST_REFUND}:{order_id}:{node_id}:{username}"))

    keyboard.add(B(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–∞", url=f"https://funpay.com/orders/{order_id}/")) \
        .row(B(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"{CBT.SEND_FP_MESSAGE}:{node_id}:{username}"),
             B(text="üìù –ó–∞–≥–æ—Ç–æ–≤–∫–∏", callback_data=f"{CBT.TMPLT_LIST_ANS_MODE}:0:{node_id}:{username}:2:{order_id}:"
                                                 f"{1 if no_refund else 0}"))
    return keyboard


def reply(node_id: int, username: str, again: bool = False, extend: bool = False) -> types.InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FunPay.

    :param node_id: ID –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param username: –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –≤–µ–¥–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞.
    :param again: –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ"?
    :param extend: –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É "–†–∞—Å—à–∏—Ä–∏—Ç—å"?
    """
    buttons = [B(text=f"{'üì® –û—Ç–≤–µ—Ç' if not again else 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ'}",
               callback_data=f"{CBT.SEND_FP_MESSAGE}:{node_id}:{username}"),
               B(text="üìù –®–∞–±–ª–æ–Ω—ã",
                 callback_data=f"{CBT.TMPLT_LIST_ANS_MODE}:0:{node_id}:{username}:{int(again)}:{int(extend)}")]
    if extend:
        buttons.append(B(text="‚ûï –ë–æ–ª—å—à–µ",
                         callback_data=f"{CBT.EXTEND_CHAT}:{node_id}:{username}"))
    buttons.append(B(text=f"üåê {username}", url=f"https://funpay.com/chat/?node={node_id}"))
    keyboard = types.InlineKeyboardMarkup() \
        .row(*buttons)
    return keyboard


def templates_list(cardinal: Cardinal, offset: int) \
        -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤. (CBT.TMPLT_LIST:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤.
    """
    keyboard = types.InlineKeyboardMarkup()
    templates = cardinal.telegram.answer_templates[offset: offset + MENU_CFG.TMPLT_BTNS_AMOUNT]
    if not templates and offset != 0:
        offset = 0
        templates = cardinal.telegram.answer_templates[offset: offset + MENU_CFG.TMPLT_BTNS_AMOUNT]

    for index, tmplt in enumerate(templates):
        keyboard.add(B(tmplt, callback_data=f"{CBT.EDIT_TMPLT}:{offset + index}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.TMPLT_BTNS_AMOUNT, len(templates),
                                            len(cardinal.telegram.answer_templates), CBT.TMPLT_LIST)
    keyboard.add(B("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫—É", callback_data=f"{CBT.ADD_TMPLT}:{offset}")) \
        .add(B("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN))
    return keyboard


def edit_template(cardinal: Cardinal, template_index: int, offset: int) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (CBT.EDIT_TMPLT:<template_index>:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param template_index: —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å —à–∞–±–ª–æ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞.
    """
    keyboard = types.InlineKeyboardMarkup() \
        .add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.TMPLT_LIST}:{offset}")) \
        .add(B("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CBT.DEL_TMPLT}:{template_index}:{offset}"))
    return keyboard


def templates_list_ans_mode(cardinal: Cardinal, offset: int, node_id: int, username: str, prev_page: int,
                            extra: list | None = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
    (CBT.TMPLT_LIST_ANS_MODE:{offset}:{node_id}:{username}:{prev_page}:{extra}).


    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞.
    :param node_id: ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω.
    :param username: –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –≤–µ–¥–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞.
    :param prev_page: –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param extra: –¥–æ–ø –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """

    keyboard = types.InlineKeyboardMarkup()
    templates = cardinal.telegram.answer_templates[offset: offset + MENU_CFG.TMPLT_BTNS_AMOUNT]
    extra_str = ":" + ":".join(str(i) for i in extra) if extra else ""

    if not templates and offset != 0:
        offset = 0
        templates = cardinal.telegram.answer_templates[offset: offset + MENU_CFG.TMPLT_BTNS_AMOUNT]

    for index, tmplt in enumerate(templates):
        keyboard.add(B(tmplt.replace("$username", username),
                       callback_data=f"{CBT.SEND_TMPLT}:{offset + index}:{node_id}:{username}:{prev_page}{extra_str}"))

    extra_list = [node_id, username, prev_page]
    extra_list.extend(extra)
    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.TMPLT_BTNS_AMOUNT, len(templates),
                                            len(cardinal.telegram.answer_templates), CBT.TMPLT_LIST_ANS_MODE,
                                            extra_list)

    if prev_page == 0:
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.BACK_TO_REPLY_KB}:{node_id}:{username}:0{extra_str}"))
    elif prev_page == 1:
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.BACK_TO_REPLY_KB}:{node_id}:{username}:1{extra_str}"))
    elif prev_page == 2:
        keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.BACK_TO_ORDER_KB}:{node_id}:{username}{extra_str}"))
    return keyboard


def plugins_list(cardinal: Cardinal, offset: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–ª–∞–≥–∏–Ω–æ–≤ (CBT.PLUGINS_LIST:<offset>).

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤.
    """
    keyboard = types.InlineKeyboardMarkup()
    plugins = list(cardinal.plugins.keys())[offset: offset + MENU_CFG.PLUGINS_BTNS_AMOUNT]
    if not plugins and offset != 0:
        offset = 0
        plugins = list(cardinal.plugins.keys())[offset: offset + MENU_CFG.PLUGINS_BTNS_AMOUNT]

    for uuid in plugins:
        #  CBT.EDIT_CMD:–Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:—Å–º–µ—â–µ–Ω–∏–µ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
        keyboard.add(B(f"{cardinal.plugins[uuid].name} {utils.bool_to_text(cardinal.plugins[uuid].enabled)}",
                       callback_data=f"{CBT.EDIT_PLUGIN}:{uuid}:{offset}"))

    keyboard = utils.add_navigation_buttons(keyboard, offset, MENU_CFG.PLUGINS_BTNS_AMOUNT, len(plugins),
                                            len(list(cardinal.plugins.keys())), CBT.PLUGINS_LIST)

    keyboard.add(B("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω", callback_data=f"{CBT.UPLOAD_PLUGIN}:{offset}")) \
        .add(B("üìã –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=CBT.MAIN2))
    return keyboard


def edit_plugin(cardinal: Cardinal, uuid: str, offset: int, ask_to_delete: bool = False):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–º.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param uuid: UUID –ø–ª–∞–≥–∏–Ω–∞.
    :param offset: —Å–º–µ—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤.
    :param ask_to_delete: –≤—Å—Ç–∞–≤–∏—Ç—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞?
    """
    plugin_obj = cardinal.plugins[uuid]
    keyboard = types.InlineKeyboardMarkup()
    active_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if cardinal.plugins[uuid].enabled else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    keyboard.add(B(active_text, callback_data=f"{CBT.TOGGLE_PLUGIN}:{uuid}:{offset}"))

    if plugin_obj.commands:
        keyboard.add(B("‚å®Ô∏è –ö–æ–º–∞–Ω–¥—ã", callback_data=f"{CBT.PLUGIN_COMMANDS}:{uuid}:{offset}"))
    if plugin_obj.settings_page:
        keyboard.add(B("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{CBT.PLUGIN_SETTINGS}:{uuid}:{offset}"))

    if not ask_to_delete:
        keyboard.add(B("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CBT.DELETE_PLUGIN}:{uuid}:{offset}"))
    else:
        keyboard.row(B("‚úÖ –î–∞", callback_data=f"{CBT.CONFIRM_DELETE_PLUGIN}:{uuid}:{offset}"),
                     B("‚ùå –ù–µ—Ç", callback_data=f"{CBT.CANCEL_DELETE_PLUGIN}:{uuid}:{offset}"))
    keyboard.add(B("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGINS_LIST}:{offset}"))

    return keyboard
