"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –æ–ø–∏—Å–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–£ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.
–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø–ª–∞–≥–∏–Ω–∞.
"""

from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from tg_bot import utils, keyboards, CBT, MENU_CFG

from telebot.types import InlineKeyboardButton as Button
from tg_bot.static_keyboards import CLEAR_STATE_BTN
from telebot import types
import datetime
import logging


logger = logging.getLogger("TGBot")


def init_auto_response_cp(cardinal: Cardinal, *args):
    tg = cardinal.telegram
    bot = tg.bot

    def check_command_exists(command_index: int, message_obj: types.Message, reply_mode: bool = True) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.

        :param command_index: –∏–Ω–¥–µ–∫—Å –∫–æ–º–∞–Ω–¥—ã.

        :param message_obj: —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.

        :param reply_mode: —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        –ï—Å–ª–∏ True - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        –µ—Å–ª–∏ False - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

        :return: True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False, –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if command_index > len(cardinal.RAW_AR_CFG.sections()) - 1:
            update_button = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                                                    callback_data=f"{CBT.CMD_LIST}:0"))
            if reply_mode:
                bot.reply_to(message_obj, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{command_index}</code>.",
                             reply_markup=update_button)
            else:
                bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –∏–Ω–¥–µ–∫—Å–æ–º <code>{command_index}</code>.",
                                      message_obj.chat.id, message_obj.id, reply_markup=update_button)
            return False
        return True

    def open_commands_list(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥.
        """
        offset = int(c.data.split(":")[1])
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–æ–º–∞–Ω–¥—É.", c.message.chat.id, c.message.id,
                              reply_markup=keyboards.commands_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    def act_add_command(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.
        """
        result = bot.send_message(c.message.chat.id,
                                  "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫ <code>|</code>).",
                                  reply_markup=CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.ADD_CMD)
        bot.answer_callback_query(c.id)

    def add_command(m: types.Message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ñ–∏–≥.
        """
        tg.clear_state(m.chat.id, m.from_user.id, True)
        raw_command = m.text.strip().lower()
        commands = [i.strip() for i in raw_command.split("|") if i.strip()]
        applied_commands = []
        error_keyboard = types.InlineKeyboardMarkup()\
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CATEGORY}:autoResponse"),
                 Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é", callback_data=CBT.ADD_CMD))

        for cmd in commands:
            if cmd in applied_commands:

                bot.reply_to(m, f"‚ùå –í —Å–µ—Ç–µ –∫–æ–º–∞–Ω–¥ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ <code>{utils.escape(cmd)}</code>.",
                             reply_markup=error_keyboard)
                return
            if cmd in cardinal.AR_CFG.sections():
                bot.reply_to(m, f"‚ùå –ö–æ–º–∞–Ω–¥–∞ <code>{utils.escape(cmd)}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                             reply_markup=error_keyboard)
                return
            applied_commands.append(cmd)

        cardinal.RAW_AR_CFG.add_section(raw_command)
        cardinal.RAW_AR_CFG.set(raw_command, "response", "–î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ :(")
        cardinal.RAW_AR_CFG.set(raw_command, "telegramNotification", "0")

        for cmd in applied_commands:
            cardinal.AR_CFG.add_section(cmd)
            cardinal.AR_CFG.set(cmd, "response", "–î–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ :(")
            cardinal.AR_CFG.set(cmd, "telegramNotification", "0")

        cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")

        command_index = len(cardinal.RAW_AR_CFG.sections()) - 1
        offset = utils.get_offset(command_index, MENU_CFG.AR_BTNS_AMOUNT)
        keyboard = types.InlineKeyboardMarkup()\
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.CATEGORY}:autoResponse"),
                 Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=CBT.ADD_CMD),
                 Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data=f"{CBT.EDIT_CMD}:{command_index}:{offset}"))
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET –¥–æ–±–∞–≤–∏–ª —Å–µ–∫—Ü–∏—é "
                    f"$YELLOW[{raw_command}]$RESET –≤ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.")
        bot.reply_to(m, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ–∫—Ü–∏—è "
                        f"<code>[{utils.escape(raw_command)}]</code> –≤ –∫–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.",
                     reply_markup=keyboard)

    def open_edit_command_cp(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.
        """
        split = c.data.split(":")
        command_index, offset = int(split[1]), int(split[2])
        if not check_command_exists(command_index, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        keyboard = keyboards.edit_command(cardinal, command_index, offset)

        command = cardinal.RAW_AR_CFG.sections()[command_index]
        command_obj = cardinal.RAW_AR_CFG[command]
        if command_obj.get("telegramNotification") == "1":
            telegram_notification_text = "–î–∞."
        else:
            telegram_notification_text = "–ù–µ—Ç."
        notification_text = command_obj.get("notificationText")
        notification_text = notification_text if notification_text else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $username –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É $message_text."

        message = f"""<b>[{utils.escape(command)}]</b>

<b><i>–û—Ç–≤–µ—Ç:</i></b> <code>{utils.escape(command_obj["response"])}</code>

<b><i>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:</i></b> <b><u>{telegram_notification_text}</u></b>

<b><i>–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</i></b> <code>{utils.escape(notification_text)}</code>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{datetime.datetime.now().strftime('%H:%M:%S')}</code>"""
        bot.edit_message_text(message, c.message.chat.id, c.message.id, reply_markup=keyboard)
        bot.answer_callback_query(c.id)

    def act_edit_command_response(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É.
        """
        split = c.data.split(":")
        command_index, offset = int(split[1]), int(split[2])

        result = bot.send_message(c.message.chat.id,
                                  "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞."
                                  "\n\n–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:"
                                  "\n<code>$full_date_text</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>01.01.2001</i>."
                                  "\n<code>$date_text</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>1 —è–Ω–≤–∞—Ä—è</i>."
                                  "\n<code>$date</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>1 —è–Ω–≤–∞—Ä—è 2001 –≥–æ–¥–∞</i>."
                                  "\n<code>$time</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–ß–ß:–ú–ú</i>."
                                  "\n<code>$full_time</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–ß–ß:–ú–ú:–°–°</i>."
                                  "\n<code>$username</code> - –Ω–∏–∫–Ω–µ–π–º –Ω–∞–ø–∏—Å–∞–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                                  "\n<code>$message_text</code> - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
                                  "\n<code>$chat_id</code> - ID —á–∞—Ç–∞."
                                  "\n<code>$photo=PHOTO ID</code> - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (–≤–º–µ—Å—Ç–æ <code>PHOTO ID</code> "
                                  "–≤–ø–∏—à–∏—Ç–µ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /upload_img)",
                                  reply_markup=CLEAR_STATE_BTN)

        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.EDIT_CMD_RESPONSE_TEXT,
                          {"command_index": command_index,
                           "offset": offset})

        bot.answer_callback_query(c.id)

    def edit_command_response(m: types.Message):
        """
        –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.
        """
        command_index = tg.get_user_state(m.chat.id, m.from_user.id)["data"]["command_index"]
        offset = tg.get_user_state(m.chat.id, m.from_user.id)["data"]["offset"]
        tg.clear_state(m.chat.id, m.from_user.id, True)
        if not check_command_exists(command_index, m):
            return

        response_text = m.text.strip()
        command = cardinal.RAW_AR_CFG.sections()[command_index]
        commands = [i.strip() for i in command.split("|") if i.strip()]
        cardinal.RAW_AR_CFG.set(command, "response", response_text)
        for cmd in commands:
            cardinal.AR_CFG.set(cmd, "response", response_text)
        cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ "
                    f"–∫–æ–º–∞–Ω–¥—ã / —Å–µ—Ç–∞ –∫–æ–º–∞–Ω–¥ $YELLOW[{command}]$RESET –Ω–∞ $YELLOW\"{response_text}\"$RESET.")

        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_CMD}:{command_index}:{offset}"),
                 Button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"{CBT.EDIT_CMD_RESPONSE_TEXT}:{command_index}:{offset}"))

        bot.reply_to(m, f"‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã / —Å–µ—Ç–∞ –∫–æ–º–∞–Ω–¥ <code>[{utils.escape(command)}]</code> "
                        f"–∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <code>{utils.escape(response_text)}</code>",
                     reply_markup=keyboard)

    def act_edit_command_notification(c: types.CallbackQuery):
        """
        –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
        """
        split = c.data.split(":")
        command_index, offset = int(split[1]), int(split[2])
        result = bot.send_message(c.message.chat.id,
                                  "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
                                  "\n\n–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:"
                                  "\n<code>$full_date_text</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>01.01.2001</i>."
                                  "\n<code>$date_text</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>1 —è–Ω–≤–∞—Ä—è</i>."
                                  "\n<code>$date</code> - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>1 —è–Ω–≤–∞—Ä—è 2001 –≥–æ–¥–∞</i>."
                                  "\n<code>$time</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–ß–ß:–ú–ú</i>."
                                  "\n<code>$full_time</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–ß–ß:–ú–ú:–°–°</i>."
                                  "\n<code>$username</code> - –Ω–∏–∫–Ω–µ–π–º –Ω–∞–ø–∏—Å–∞–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                                  "\n<code>$message_text</code> - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
                                  "\n<code>$chat_id</code> - ID —á–∞—Ç–∞."
                                  "\n<code>$photo=PHOTO ID</code> - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (–≤–º–µ—Å—Ç–æ <code>PHOTO ID</code> "
                                  "–≤–ø–∏—à–∏—Ç–µ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /upload_img)",
                                  reply_markup=CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.EDIT_CMD_NOTIFICATION_TEXT,
                          {"command_index": command_index,
                           "offset": offset})
        bot.answer_callback_query(c.id)

    def edit_command_notification(m: types.Message):
        """
        –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
        """
        command_index = tg.get_user_state(m.chat.id, m.from_user.id)["data"]["command_index"]
        offset = tg.get_user_state(m.chat.id, m.from_user.id)["data"]["offset"]
        tg.clear_state(m.chat.id, m.from_user.id, True)

        if not check_command_exists(command_index, m):
            return

        notification_text = m.text.strip()
        command = cardinal.RAW_AR_CFG.sections()[command_index]
        commands = [i.strip() for i in command.split("|") if i.strip()]
        cardinal.RAW_AR_CFG.set(command, "notificationText", notification_text)

        for cmd in commands:
            cardinal.AR_CFG.set(cmd, "notificationText", notification_text)
        cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{m.from_user.username} (id: {m.from_user.id})$RESET –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç "
                    f"—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã $YELLOW[{command}]$RESET –Ω–∞ $YELLOW\"{notification_text}\"$RESET.")

        keyboard = types.InlineKeyboardMarkup() \
            .row(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_CMD}:{command_index}:{offset}"),
                 Button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"{CBT.EDIT_CMD_NOTIFICATION_TEXT}:{command_index}:{offset}"))

        bot.reply_to(m, f"‚úÖ –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã / —Å–µ—Ç–∞ –∫–æ–º–∞–Ω–¥ <code>[{utils.escape(command)}]</code> "
                        f"–∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <code>{utils.escape(notification_text)}</code>",
                     reply_markup=keyboard)

    def switch_notification(c: types.CallbackQuery):
        """
        –í–∫–ª / –í—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.
        """
        split = c.data.split(":")
        command_index, offset = int(split[1]), int(split[2])
        bot.answer_callback_query(c.id)
        if not check_command_exists(command_index, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        command = cardinal.RAW_AR_CFG.sections()[command_index]
        commands = [i.strip() for i in command.split("|") if i.strip()]
        command_obj = cardinal.RAW_AR_CFG[command]
        if command_obj.get("telegramNotification") in [None, "0"]:
            value = "1"
        else:
            value = "0"
        cardinal.RAW_AR_CFG.set(command, "telegramNotification", value)
        for cmd in commands:
            cardinal.AR_CFG.set(cmd, "telegramNotification", value)
        cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{c.from_user.username} (id: {c.from_user.id})$RESET –∏–∑–º–µ–Ω–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ "
                    f"–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ $CYANtelegramNotification$RESET –∫–æ–º–∞–Ω–¥—ã / —Å–µ—Ç–∞ –∫–æ–º–∞–Ω–¥ $YELLOW[{command}]$RESET "
                    f"–Ω–∞ $YELLOW{value}$RESET.")
        open_edit_command_cp(c)

    def del_command(c: types.CallbackQuery):
        """
        –£–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞.
        """
        split = c.data.split(":")
        command_index, offset = int(split[1]), int(split[2])
        if not check_command_exists(command_index, c.message, reply_mode=False):
            bot.answer_callback_query(c.id)
            return

        command = cardinal.RAW_AR_CFG.sections()[command_index]
        commands = [i.strip() for i in command.split("|") if i.strip()]
        cardinal.RAW_AR_CFG.remove_section(command)
        for cmd in commands:
            cardinal.AR_CFG.remove_section(cmd)
        cardinal.save_config(cardinal.RAW_AR_CFG, "configs/auto_response.cfg")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{c.from_user.username} (id: {c.from_user.id})$RESET —É–¥–∞–ª–∏–ª "
                    f"–∫–æ–º–∞–Ω–¥—É / —Å–µ—Ç –∫–æ–º–∞–Ω–¥ $YELLOW[{command}]$RESET.")
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–æ–º–∞–Ω–¥—É.", c.message.chat.id, c.message.id,
                              reply_markup=keyboards.commands_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    tg.cbq_handler(open_commands_list, lambda c: c.data.startswith(f"{CBT.CMD_LIST}:"))

    tg.cbq_handler(act_add_command, lambda c: c.data == CBT.ADD_CMD)
    tg.msg_handler(add_command, func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.ADD_CMD))

    tg.cbq_handler(open_edit_command_cp, lambda c: c.data.startswith(f"{CBT.EDIT_CMD}:"))

    tg.cbq_handler(act_edit_command_response, lambda c: c.data.startswith(f"{CBT.EDIT_CMD_RESPONSE_TEXT}:"))
    tg.msg_handler(edit_command_response,
                   func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.EDIT_CMD_RESPONSE_TEXT))

    tg.cbq_handler(act_edit_command_notification, lambda c: c.data.startswith(f"{CBT.EDIT_CMD_NOTIFICATION_TEXT}:"))
    tg.msg_handler(edit_command_notification,
                   func=lambda m: tg.check_state(m.chat.id, m.from_user.id, CBT.EDIT_CMD_NOTIFICATION_TEXT))

    tg.cbq_handler(switch_notification, lambda c: c.data.startswith(f"{CBT.SWITCH_CMD_NOTIFICATION}:"))
    tg.cbq_handler(del_command, lambda c: c.data.startswith(f"{CBT.DEL_CMD}:"))


BIND_TO_PRE_INIT = [init_auto_response_cp]
