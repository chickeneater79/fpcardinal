"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –æ–ø–∏—Å–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–£ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ—Ç–≤–µ—Ç–∞.
–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø–ª–∞–≥–∏–Ω–∞.
"""

from __future__ import annotations

import os
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from tg_bot import utils, keyboards, CBT
from tg_bot.static_keyboards import CLEAR_STATE_BTN

from telebot.types import InlineKeyboardButton as Button
from telebot import types
import datetime
import logging

logger = logging.getLogger("TGBot")


def init_plugins_cp(cardinal: Cardinal, *args):
    tg = cardinal.telegram
    bot = tg.bot

    def check_plugin_exists(uuid: str, message_obj: types.Message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º.
        –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.

        :param uuid: UUID –ø–ª–∞–≥–∏–Ω–∞.

        :param message_obj: —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è.

        :return: True, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False, –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if uuid not in cardinal.plugins:
            update_button = types.InlineKeyboardMarkup().add(Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                                                                    callback_data=f"{CBT.PLUGINS_LIST}:0"))
            bot.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–≥–∏–Ω —Å UUID <code>{uuid}</code>.",
                                  message_obj.chat.id, message_obj.id,
                                  reply_markup=update_button)
            return False
        return True

    def open_plugins_list(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
        """
        offset = int(c.data.split(":")[1])
        bot.edit_message_text(f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–≥–∏–Ω–µ, –∞ —Ç–∞–∫ –∂–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ.\n\n"
                              f"‚ö†Ô∏è <b><u>–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ / –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ / –¥–æ–±–∞–≤–ª–µ–Ω–∏—è / —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ "
                              f"–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!</u></b> (/restart)",
                              c.message.chat.id, c.message.id,
                              reply_markup=keyboards.plugins_list(cardinal, offset))
        bot.answer_callback_query(c.id)

    def open_edit_plugin_cp(c: types.CallbackQuery):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞.
        """
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])

        if not check_plugin_exists(uuid, c.message):
            bot.answer_callback_query(c.id)
            return

        plugin_data = cardinal.plugins[uuid]
        text = f"""<b><i>{utils.escape(plugin_data.name)} v{utils.escape(plugin_data.version)}</i></b>
        
{utils.escape(plugin_data.description)}

<b><i>UUID: </i></b><code>{utils.escape(plugin_data.uuid)}</code>

<b><i>–ê–≤—Ç–æ—Ä: </i></b>{utils.escape(plugin_data.credits)}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</i>  <code>{datetime.datetime.now().strftime('%H:%M:%S')}</code>"""
        keyboard = keyboards.edit_plugin(cardinal, uuid, offset)

        bot.edit_message_text(text, c.message.chat.id, c.message.id, reply_markup=keyboard)
        bot.answer_callback_query(c.id)

    def open_plugin_commands(c: types.CallbackQuery):
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])

        if not check_plugin_exists(uuid, c.message):
            bot.answer_callback_query(c.id)
            return

        pl_obj = cardinal.plugins[uuid]
        commands_text = "\n\n".join(f"/{i} - {pl_obj.commands[i]}"
                                    f"{'' if pl_obj.commands[i].endswith('.') else '.'}" for i in pl_obj.commands)
        text = f"""–ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–≥–∏–Ω–∞ <b><i>{utils.escape(pl_obj.name)}.</i></b>
        
{commands_text}"""

        keyboard = types.InlineKeyboardMarkup()\
            .add(Button("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{uuid}:{offset}"))

        bot.edit_message_text(text, c.message.chat.id, c.message.id, reply_markup=keyboard)

    def toggle_plugin(c: types.CallbackQuery):
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])

        if not check_plugin_exists(uuid, c.message):
            bot.answer_callback_query(c.id)
            return

        cardinal.toggle_plugin(uuid)
        c.data = f"{CBT.EDIT_PLUGIN}:{uuid}:{offset}"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{c.from_user.username} (id: {c.from_user.id})$RESET "
                    f"{'–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª' if cardinal.plugins[uuid].enabled else '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª'} "
                    f"–ø–ª–∞–≥–∏–Ω $YELLOW\"{cardinal.plugins[uuid].name}\"$RESET.")
        open_edit_plugin_cp(c)

    def ask_delete_plugin(c: types.CallbackQuery):
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])

        if not check_plugin_exists(uuid, c.message):
            bot.answer_callback_query(c.id)
            return

        bot.edit_message_reply_markup(c.message.chat.id, c.message.id,
                                      reply_markup=keyboards.edit_plugin(cardinal, uuid, offset, True))
        bot.answer_callback_query(c.id)

    def cancel_delete_plugin(c: types.CallbackQuery):
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])

        if not check_plugin_exists(uuid, c.message):
            bot.answer_callback_query(c.id)
            return

        bot.edit_message_reply_markup(c.message.chat.id, c.message.id,
                                      reply_markup=keyboards.edit_plugin(cardinal, uuid, offset))
        bot.answer_callback_query(c.id)

    def delete_plugin(c: types.CallbackQuery):
        split = c.data.split(":")
        uuid, offset = split[1], int(split[2])

        if not check_plugin_exists(uuid, c.message):
            bot.answer_callback_query(c.id)
            return

        if uuid not in cardinal.plugins:
            bot.send_message(c.message.chat.id, "‚ùå –ü–ª–∞–≥–∏–Ω —É–∂–µ —É–¥–∞–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ FPC —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /restart.")
            bot.answer_callback_query(c.id)
            return

        if not os.path.exists(cardinal.plugins[uuid].path):
            bot.send_message(c.message.chat.id, f"‚ùå  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ñ–∞–π–ª "
                                                f"<code>{utils.escape(cardinal.plugins[uuid].path)}</code>."
                                                f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ FPC —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /restart.")
            bot.answer_callback_query(c.id)
            return

        if cardinal.plugins[uuid].delete_handler:
            try:
                cardinal.plugins[uuid].delete_handler(cardinal, c)
            except:
                logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
                logger.debug("TRACEBACK", exc_info=True)

        os.remove(cardinal.plugins[uuid].path)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MAGENTA@{c.from_user.username} (id: {c.from_user.id})$RESET —É–¥–∞–ª–∏–ª "
                    f"–ø–ª–∞–≥–∏–Ω $YELLOW\"{cardinal.plugins[uuid].name}\"$RESET.")
        cardinal.plugins.pop(uuid)

        c.data = f"{CBT.PLUGINS_LIST}:{offset}"
        open_plugins_list(c)

    def act_upload_plugin(c: types.CallbackQuery):
        offset = int(c.data.split(":")[1])
        result = bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–ª–∞–≥–∏–Ω.", reply_markup=CLEAR_STATE_BTN)
        tg.set_user_state(c.message.chat.id, result.id, c.from_user.id, CBT.UPLOAD_PLUGIN, {"offset": offset})
        bot.answer_callback_query(c.id)

    tg.cbq_handler(open_plugins_list, lambda c: c.data.startswith(f"{CBT.PLUGINS_LIST}:"))
    tg.cbq_handler(open_edit_plugin_cp, lambda c: c.data.startswith(f"{CBT.EDIT_PLUGIN}:"))
    tg.cbq_handler(open_plugin_commands, lambda c: c.data.startswith(f"{CBT.PLUGIN_COMMANDS}:"))
    tg.cbq_handler(toggle_plugin, lambda c: c.data.startswith(f"{CBT.TOGGLE_PLUGIN}:"))

    tg.cbq_handler(ask_delete_plugin, lambda c: c.data.startswith(f"{CBT.DELETE_PLUGIN}:"))
    tg.cbq_handler(cancel_delete_plugin, lambda c: c.data.startswith(f"{CBT.CANCEL_DELETE_PLUGIN}:"))
    tg.cbq_handler(delete_plugin, lambda c: c.data.startswith(f"{CBT.CONFIRM_DELETE_PLUGIN}:"))

    tg.cbq_handler(act_upload_plugin, lambda c: c.data.startswith(f"{CBT.UPLOAD_PLUGIN}:"))


BIND_TO_PRE_INIT = [init_plugins_cp]
