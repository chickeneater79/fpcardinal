"""
–í –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ –Ω–∞–ø–∏—Å–∞–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–≤–µ–Ω—Ç–æ–≤.
"""

from __future__ import annotations

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from cardinal import Cardinal

from FunPayAPI.types import MessageTypes, RaiseResponse, Message, OrderShortcut, Order
from FunPayAPI import exceptions, utils as fp_utils
from FunPayAPI.updater.events import *


from tg_bot import utils, keyboards
from Utils import cardinal_tools
from threading import Thread
import configparser
import logging
import time
import re

LAST_STACK_ID = ""


logger = logging.getLogger("FPC.handlers")


ORDER_HTML_TEMPLATE = """<a href="https://funpay.com/orders/DELIVERY_TEST/" class="tc-item info">
    <div class="tc-date">
        <div class="tc-date-time">—Å–µ–≥–æ–¥–Ω—è, 00:00</div>
        <div class="tc-date-left">1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥</div>
    </div>

    <div class="tc-order">#DELIVERY_TEST</div>
    <div class="order-desc">
        <div>–¢–ï–°–¢ –ê–í–¢–û–í–´–î–ê–ß–ò</div>
        <div class="text-muted">$lot_name</div>
    </div>

    <div class="tc-user">
        <div class="media media-user mt0 offline">
        <div class="media-left">
            <div class="avatar-photo pseudo-a" tabindex="0" data-href="https://funpay.com/users/000000/" style="background-image: url(https://s.funpay.com/s/avatar/6d/h3/6dh3m89zv8k90kwlj9bg.jpg);"></div>
        </div>
        <div class="media-body">
            <div class="media-user-name">
                <span class="pseudo-a" tabindex="0" data-href="https://funpay.com/users/000000/">$username</span>
            </div>
            <div class="media-user-status">–±—ã–ª –º–∏–ª–ª–∏–æ–Ω –ª–µ—Ç –Ω–∞–∑–∞–¥</div>
        </div>
    </div>
        <div class="tc-status text-primary">–û–ø–ª–∞—á–µ–Ω</div>
        <div class="tc-price text-nowrap tc-seller-sum">999999.0<span class="unit">‚ÇΩ</span></div>
</a>"""


AMOUNT_EXPRESSION = re.compile(r'\d+ —à—Ç\.')


# –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (REGISTER_TO_NEW_MESSAGE)
def log_msg_handler(cardinal: Cardinal, event: NewMessageEvent):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    message_text, name, chat_id = str(event.message), event.message.chat_name, event.message.chat_id
    logger.info(f"$MAGENTA‚îå‚îÄ‚îÄ$RESET –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º $YELLOW{name} (node: {chat_id}):")

    for index, line in enumerate(message_text.split("\n")):
        if not index:
            logger.info(f"$MAGENTA‚îî‚îÄ‚îÄ‚îÄ> $CYAN{line}")
        else:
            logger.info(f"      $CYAN{line}")


def save_already_exists_chat_handler(cardinal: Cardinal, event: InitialChatEvent):
    """
    –ö—ç—à–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã (—á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    if not cardinal.MAIN_CFG["Greetings"].getboolean("cacheInitChats"):
        return
    if event.chat.name not in cardinal.old_users:
        cardinal.old_users.append(event.chat.name)
        cardinal_tools.cache_old_users(cardinal.old_users)


def send_greetings_handler(cardinal: Cardinal, event: NewMessageEvent):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not cardinal.MAIN_CFG["Greetings"].getboolean("sendGreetings"):
        return

    obj = event.message
    chat_id, chat_name, message_text, message_type = obj.chat_id, obj.chat_name, str(obj), obj.type
    its_me = obj.author_id == cardinal.account.id
    if any([chat_name in cardinal.old_users, its_me, message_type != MessageTypes.NON_SYSTEM]):
        return

    def send_greetings():
        logger.info(f"–ù–æ–≤—ã–π —á–∞—Ç $YELLOW{chat_name}$RESET. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        text = cardinal_tools.format_msg_text(cardinal.MAIN_CFG["Greetings"]["greetingsText"], obj)
        result = cardinal.send_message(chat_id, text, chat_name)
        if not result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç $YELLOW{chat_name} (ID: {chat_id})$RESET.")
    Thread(target=send_greetings, daemon=True).start()


def add_old_user_handler(cardinal: Cardinal, event: NewMessageEvent):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Å–∞–≤—à–∏—Ö.
    """
    chat_name = event.message.chat_name
    if chat_name in cardinal.old_users:
        return
    cardinal.old_users.append(chat_name)
    cardinal_tools.cache_old_users(cardinal.old_users)


def send_response_handler(cardinal: Cardinal, event: NewMessageEvent):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π, –∏ –µ—Å–ª–∏ –¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.
    """
    if not cardinal.MAIN_CFG["FunPay"].getboolean("autoResponse"):
        return

    obj, message_text = event.message, str(event.message)
    chat_id, chat_name, username = event.message.chat_id, event.message.chat_name, event.message.author

    if cardinal.MAIN_CFG["BlockList"].getboolean("blockResponse") and username in cardinal.block_list:
        return

    command = message_text.strip().lower()
    if command not in cardinal.AR_CFG:
        return

    def send_response():
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ $YELLOW{command}$RESET "
                    f"–≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º $YELLOW{chat_name} (ID —á–∞—Ç–∞: {chat_id}).")
        response_text = cardinal_tools.format_msg_text(cardinal.AR_CFG[command]["response"], obj)
        result = cardinal.send_message(chat_id, response_text, chat_name)
        if not result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º $YELLOW{chat_name}$RESET.")

    Thread(target=send_response, daemon=True).start()


def send_new_message_notification_handler(cardinal: Cardinal, event: NewMessageEvent) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if not cardinal.telegram:
        return
    global LAST_STACK_ID
    if event.stack.id() == LAST_STACK_ID:
        return
    LAST_STACK_ID = event.stack.id()

    events = []
    not_my = False
    my = False
    fp = False
    bot = False
    for i in event.stack.get_stack():
        if i.message.author_id == 0:
            if int(cardinal.MAIN_CFG["NewMessageView"]["includeFPMessages"]):
                events.append(i)
                fp = True
        elif i.message.by_bot:
            if int(cardinal.MAIN_CFG["NewMessageView"]["includeBotMessages"]):
                events.append(i)
                bot = True
        elif i.message.author_id == cardinal.account.id:
            if int(cardinal.MAIN_CFG["NewMessageView"]["includeMyMessages"]):
                events.append(i)
                my = True
        else:
            events.append(i)
            not_my = True
    if not events:
        return

    if len([i for i in [my, fp, bot, not_my] if i]) == 1:
        if my and not cardinal.MAIN_CFG["NewMessageView"].getboolean("notifyOnlyMyMessages"):
            return
        elif fp and not cardinal.MAIN_CFG["NewMessageView"].getboolean("notifyOnlyFPMessages"):
            return
        elif bot and not cardinal.MAIN_CFG["NewMessageView"].getboolean("notifyOnlyBotMessages"):
            return

    text = ""
    last_message_author_id = -1
    last_by_bot = False
    for i in events:
        message_text = str(event.message)
        if message_text.strip().lower() in cardinal.AR_CFG.sections() and len(events) < 2:
            continue
        elif message_text.startswith("!–∞–≤—Ç–æ–≤—ã–¥–∞—á–∞") and len(events) < 2:
            continue

        if i.message.author_id == last_message_author_id and i.message.by_bot == last_by_bot:
            author = ""
        elif i.message.author_id == cardinal.account.id:
            author = "<i><b>ü§ñ –í—ã (–±–æ—Ç):</b></i> " if i.message.by_bot else "<i><b>ü´µ –í—ã:</b></i> "
        elif i.message.author_id == 0:
            author = f"<i><b>üîµ {i.message.author}: </b></i>"
        elif i.message.author == i.message.chat_name:
            author = f"<i><b>üë§ {i.message.author}: </b></i>"
        else:
            author = f"<i><b>üÜò {i.message.author} (—Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞): </b></i>"
        msg_text = f"<code>{i.message}</code>" if i.message.text else f"<a href=\"{i.message}\">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è</a>"
        text += f"{author}{msg_text}\n\n"
        last_message_author_id = i.message.author_id
        last_by_bot = i.message.by_bot

    chat_id, chat_name = event.message.chat_id, event.message.chat_name

    if cardinal.MAIN_CFG["BlockList"].getboolean("blockNewMessageNotification") and chat_name in cardinal.block_list:
        return
    if not text:
        return

    kb = keyboards.reply(chat_id, chat_name, extend=True)
    Thread(target=cardinal.telegram.send_notification, args=(text, kb, utils.NotificationTypes.new_message),
           daemon=True).start()


def send_review_notification(cardinal: Cardinal, order: Order, chat_id: int, reply_text: str | None):
    if not cardinal.telegram:
        return
    reply_text = f"\n\nüó®Ô∏è<b>–û—Ç–≤–µ—Ç:</b> \n<code>{reply_text}</code>" if reply_text else ""
    Thread(target=cardinal.telegram.send_notification,
           args=(f"üîÆ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {'‚≠ê' * order.review.stars} –∑–∞ –∑–∞–∫–∞–∑ <code>{order.id}</code>!\n\n"
                 f"üí¨<b>–û—Ç–∑—ã–≤:</b>\n<code>{order.review.text}</code>{reply_text}",
                 keyboards.new_order(order.id, order.buyer_username, chat_id),
                 utils.NotificationTypes.review),
           daemon=True).start()


def process_review(cardinal: Cardinal, event: NewMessageEvent):
    message_type, its_me = event.message.type, cardinal.account.username in str(event.message)
    message_text, chat_id = str(event.message), event.message.chat_id
    if message_type not in [types.MessageTypes.NEW_FEEDBACK, types.MessageTypes.FEEDBACK_CHANGED] or its_me:
        return

    def send_reply():
        res = fp_utils.RegularExpressions()
        order_id = res.ORDER_ID.findall(message_text)
        if not order_id:
            return
        order_id = order_id[0][1:]
        try:
            order = cardinal.account.get_order(order_id)
        except:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ #{order_id}.")
            logger.debug("TRACEBACK", exc_info=True)
            return

        if not order.review or not order.review.stars:
            return

        logger.info(f"–ò–∑–º–µ–Ω–µ–Ω –æ—Ç–∑—ã–≤ –∑–∞ –Ω–∞ –∑–∞–∫–∞–∑ {order.id}.")

        toggle = f"star{order.review.stars}Reply"
        text = f"star{order.review.stars}ReplyText"
        reply_text = None
        if cardinal.MAIN_CFG["ReviewReply"].getboolean(toggle) and cardinal.MAIN_CFG["ReviewReply"].get(text):
            try:
                reply_text = cardinal_tools.format_order_text(cardinal.MAIN_CFG["ReviewReply"].get(text), order)
                cardinal.account.send_review(order_id, reply_text, 5)
            except:
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—Ç–∑—ã–≤ {order_id}.")
                logger.debug("TRACEBACK", exc_info=True)
        send_review_notification(cardinal, order, chat_id, reply_text)
    Thread(target=send_reply, daemon=True).start()


def send_command_notification_handler(cardinal: Cardinal, event: NewMessageEvent):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if not cardinal.telegram:
        return
    obj, message_text, message_type = event.message, str(event.message), event.message.type
    chat_id, chat_name, username = event.message.chat_id, event.message.chat_name, event.message.author

    if cardinal.MAIN_CFG["BlockList"].getboolean("blockCommandNotification") and username in cardinal.block_list:
        return
    command = message_text.strip().lower()
    if command not in cardinal.AR_CFG or not cardinal.AR_CFG[command].getboolean("telegramNotification"):
        return

    if not cardinal.AR_CFG[command].get("notificationText"):
        text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É <code>{utils.escape(command)}</code>."
    else:
        text = cardinal_tools.format_msg_text(cardinal.AR_CFG[command]["notificationText"], obj)

    Thread(target=cardinal.telegram.send_notification, args=(text, keyboards.reply(chat_id, chat_name),
                                                             utils.NotificationTypes.command), daemon=True).start()


def test_auto_delivery_handler(cardinal: Cardinal, event: NewMessageEvent):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.
    """
    obj, message_text = event.message, str(event.message)
    chat_name = event.message.chat_name

    if not message_text.startswith("!–∞–≤—Ç–æ–≤—ã–¥–∞—á–∞"):
        return
    split = message_text.split(" ")
    if len(split) < 2:
        logger.warning("–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.")
        return

    key = split[1].strip()
    if key not in cardinal.delivery_tests:
        logger.warning("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.")
        return

    lot_name = cardinal.delivery_tests[key]
    del cardinal.delivery_tests[key]
    logger.info(f"–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á $YELLOW{key}$RESET —É–¥–∞–ª–µ–Ω.")

    fake_order = OrderShortcut("ADTEST", lot_name, 0.0, chat_name, 000000, types.OrderStatuses.PAID,
                               ORDER_HTML_TEMPLATE.replace("$username", chat_name).replace("$lot_name", lot_name))

    fake_event = NewOrderEvent(event.runner_tag, fake_order)
    cardinal.run_handlers(cardinal.new_order_handlers, (cardinal, fake_event,))


def send_categories_raised_notification_handler(cardinal: Cardinal, response: RaiseResponse) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–æ–≤ –≤ Telegram.
    """
    if not response.complete or not cardinal.telegram:
        return

    categories_names = [i.fullname for i in response.raised_subcategories]
    categories_text = "\n".join(f"<code>{i}</code>" for i in categories_names)
    text = f"""‚§¥Ô∏è<b><i>–ü–æ–¥–Ω—è–ª —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</i></b>
{categories_text}"""
    Thread(target=cardinal.telegram.send_notification,
           args=(text, ),
           kwargs={"notification_type": utils.NotificationTypes.lots_raise}, daemon=True).start()


# –ò–∑–º–µ–Ω–µ–Ω —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä–æ–≤ (REGISTER_TO_ORDERS_LIST_CHANGED)
def get_lot_config_by_name(cardinal: Cardinal, name: str) -> configparser.SectionProxy | None:
    """
    –ò—â–µ—Ç —Å–µ–∫—Ü–∏—é –ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä–¥–∏–Ω–∞–ª–∞.
    :param name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.

    :return: —Å–µ–∫—Ü–∏—é –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ None.
    """
    for i in cardinal.AD_CFG.sections():
        if i in name:
            return cardinal.AD_CFG[i]
    return None


def check_products_amount(config_obj: configparser.SectionProxy) -> int:
    file_name = config_obj.get("productsFileName")
    if not file_name:
        return 1
    return cardinal_tools.count_products(f"storage/products/{file_name}")


def update_current_lots_handler(cardinal: Cardinal, event: OrdersListChangedEvent):
    logger.info("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–∞—Ö...")
    attempts = 3
    while attempts:
        try:
            cardinal.curr_profile = cardinal.account.get_user(cardinal.account.id)
            cardinal.curr_profile_last_tag = event.runner_tag
            break
        except:
            logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–∞—Ö.")
            logger.debug("TRACEBACK", exc_info=True)
            attempts -= 1
            time.sleep(2)
    if not attempts:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–∞—Ö: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
        return


# –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä (REGISTER_TO_NEW_ORDER)
def log_new_order_handler(cardinal: Cardinal, event: NewOrderEvent, *args):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.
    """
    logger.info(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! ID: $YELLOW#{event.order.id}$RESET")


def send_new_order_notification_handler(cardinal: Cardinal, event: NewOrderEvent, *args):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if not cardinal.telegram:
        return

    if event.order.buyer_username in cardinal.block_list and \
            cardinal.MAIN_CFG["BlockList"].getboolean("blockNewOrderNotification"):
        return

    text = f"""üí∞ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: </b> <code>{utils.escape(event.order.description)}</code>
    
<b><i>üôç‚Äç‚ôÇÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</i></b>  <code>{event.order.buyer_username}</code>
<b><i>üíµ –°—É–º–º–∞:</i></b>  <code>{event.order.price}</code>
<b><i>üìá ID:</i></b> <code>#{event.order.id}</code>"""

    chat_id = cardinal.account.get_chat_by_name(event.order.buyer_username, True).id
    keyboard = keyboards.new_order(event.order.id, event.order.buyer_username, chat_id)
    Thread(target=cardinal.telegram.send_notification, args=(text, keyboard, utils.NotificationTypes.new_order),
           daemon=True).start()


def deliver_product(cardinal: Cardinal, event: NewOrderEvent, delivery_obj: configparser.SectionProxy,
                    *args) -> tuple[Message | None, str, int] | None:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.

    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. None - –µ—Å–ª–∏ –ª–æ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
    [–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞, –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞] - –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ.
    """
    chat_id = cardinal.account.get_chat_by_name(event.order.buyer_username).id
    response_text = cardinal_tools.format_order_text(delivery_obj["response"], event.order)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ª–æ—Ç–∞ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º response –ª–æ—Ç–∞.
    if delivery_obj.get("productsFileName") is None:
        result = cardinal.send_message(chat_id, response_text, event.order.buyer_username)
        if not result:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ä–¥–µ—Ä–∞ $YELLOW{event.order.id}$RESET. ")
        return result, response_text, -1

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä.
    file_name = delivery_obj.get("productsFileName")
    products = []
    if cardinal.MAIN_CFG["FunPay"].getboolean("multiDelivery") and not delivery_obj.getboolean("disableMultiDelivery"):
        result = AMOUNT_EXPRESSION.findall(event.order.description)
        if result:
            amount = int(result[0].split(" ")[0])
            products = cardinal_tools.get_products(f"storage/products/{file_name}", amount)
    if not products:
        products = cardinal_tools.get_products(f"storage/products/{file_name}")

    product_text = "\n".join(products[0]).replace("\\n", "\n")
    response_text = response_text.replace("$product", product_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä.
    result = cardinal.send_message(chat_id, response_text, event.order.buyer_username)

    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏.
    if not result:
        cardinal_tools.add_products(f"storage/products/{file_name}", [product_text])
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ä–¥–µ—Ä–∞ $YELLOW{event.order.id}$RESET. ")
    return result, response_text, cardinal_tools.count_products(f"storage/products/{file_name}")


def deliver_product_handler(cardinal: Cardinal, event: NewOrderEvent, *args) -> None:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è deliver_product(), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –æ—à–∏–±–∫–∏.
    """
    if not cardinal.MAIN_CFG["FunPay"].getboolean("autoDelivery"):
        return
    if event.order.buyer_username in cardinal.block_list and cardinal.MAIN_CFG["BlockList"].getboolean("blockDelivery"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.order.buyer_username} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß–° –∏ –≤–∫–ª—é—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏. "
                    f"$YELLOW(ID: {event.order.id})$RESET")
        if cardinal.telegram:
            text = f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " \
                   f"<a href=\"https://funpay.com/users/{event.order.buyer_id}/\">{event.order.buyer_username}</a> " \
                   f"–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß–° –∏ –≤–∫–ª—é—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏."
            Thread(target=cardinal.telegram.send_notification, args=(text, ),
                   kwargs={"notification_type": utils.NotificationTypes.delivery}, daemon=True).start()
        return

    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
    delivery_obj = None
    config_lot_name = ""
    for lot_name in cardinal.AD_CFG:
        if lot_name in event.order.description:
            delivery_obj = cardinal.AD_CFG[lot_name]
            config_lot_name = lot_name
            break

    if delivery_obj is None:
        logger.info(f"–õ–æ—Ç \"{event.order.description}\" –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.")
        return

    if delivery_obj.getboolean("disable"):
        logger.info(f"–î–ª—è –ª–æ—Ç–∞ \"{event.order.description}\" –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∞.")
        return

    cardinal.run_handlers(cardinal.pre_delivery_handlers, (cardinal, event, config_lot_name))

    try:
        result = deliver_product(cardinal, event, delivery_obj, *args)
        if not result[0]:
            cardinal.run_handlers(cardinal.post_delivery_handlers,
                                  (cardinal, event, config_lot_name, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.", result[2], True))
        else:
            logger.info(f"–¢–æ–≤–∞—Ä –¥–ª—è –æ—Ä–¥–µ—Ä–∞ {event.order.id} –≤—ã–¥–∞–Ω.")
            cardinal.run_handlers(cardinal.post_delivery_handlers,
                                  (cardinal, event, config_lot_name, result[1], result[2], False))
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {event.order.id}.")
        logger.debug("TRACEBACK", exc_info=True)
        cardinal.run_handlers(cardinal.post_delivery_handlers,
                              (cardinal, event, config_lot_name, str(e), -1, True))


# REGISTER_TO_POST_DELIVERY
def send_delivery_notification_handler(cardinal: Cardinal, event: NewOrderEvent, config_lot_name: str,
                                       delivery_text: str, products_left: int, errored: bool = False, *args):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞.
    """
    if cardinal.telegram is None:
        return

    if errored:
        text = f"""‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ <code>{event.order.id}</code>.

–û—à–∏–±–∫–∞: <code>{utils.escape(delivery_text)}</code>"""
    else:
        amount = "<b>‚àû</b>" if products_left == -1 else f"<code>{products_left}</code>"
        text = f"""‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ä–¥–µ—Ä–∞ <code>{event.order.id}</code>.

üõí <b><i>–¢–æ–≤–∞—Ä:</i></b>
<code>{utils.escape(delivery_text)}</code>

üìã <b><i>–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤: </i></b>{amount}"""

    Thread(target=cardinal.telegram.send_notification, args=(text, ),
           kwargs={"notification_type": utils.NotificationTypes.delivery}, daemon=True).start()


def update_lot_state(cardinal: Cardinal, lot: types.LotShortcut, task: int) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ—Ç–∞

    :param cardinal: —ç–∫–∑–µ–º–ø–ª—è—Ä –ö–∞—Ä–¥–∏–Ω–∞–ª–∞.

    :param lot: —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ—Ç–∞.

    :param task: -1 - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç. 1 - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç.

    :return: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    attempts = 3
    while attempts:
        try:
            lot_fields = cardinal.account.get_lot_fields(lot.id, lot.subcategory.id)
            if task == 1:
                lot_fields.active = True
                cardinal.account.save_lot(lot_fields)
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–æ—Ç $YELLOW{lot.description}$RESET.")
            elif task == -1:
                lot_fields.active = False
                cardinal.account.save_lot(lot_fields)
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–æ—Ç $YELLOW{lot.description}$RESET.")
            return True
        except Exception as e:
            if isinstance(e, exceptions.RequestFailedError) and e.status_code == 404:
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ—Ç–∞ $YELLOW{lot.description}$RESET:"
                             "–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return False
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ—Ç–∞ $YELLOW{lot.description}$RESET.")
            logger.debug("TRACEBACK", exc_info=True)
            attempts -= 1
            time.sleep(2)
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ—Ç–∞ $YELLOW{lot.description}$RESET: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫.")
    return False


def update_lots_states(cardinal: Cardinal, event: NewOrderEvent):
    if not any([cardinal.MAIN_CFG["FunPay"].getboolean("autoRestore"),
                cardinal.MAIN_CFG["FunPay"].getboolean("autoDisable")]):
        return
    if cardinal.curr_profile_last_tag != event.runner_tag or cardinal.last_state_change_tag == event.runner_tag:
        return

    lots = cardinal.curr_profile.get_sorted_lots(1)

    deactivated = []
    restored = []
    for lot in cardinal.profile.get_lots():
        # -1 - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
        # 0 - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
        # 1 - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        current_task = 0
        config_obj = get_lot_config_by_name(cardinal, lot.description)

        # –ï—Å–ª–∏ –ª–æ—Ç —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
        if lot.id not in lots:
            # –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ)
            if config_obj is None:
                if cardinal.MAIN_CFG["FunPay"].getboolean("autoRestore"):
                    current_task = 1

            # –∏ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏
            else:
                # –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª. + –Ω–µ –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ —Å–∞–º–æ–º –ª–æ—Ç–µ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏
                if cardinal.MAIN_CFG["FunPay"].getboolean("autoRestore") and \
                        config_obj.get("disableAutoRestore") in ["0", None]:
                    # –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º.
                    if not cardinal.MAIN_CFG["FunPay"].getboolean("autoDisable"):
                        current_task = 1
                    # –µ—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã.
                    else:
                        if check_products_amount(config_obj):
                            current_task = 1

        # –ï—Å–ª–∏ –∂–µ –ª–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
        else:
            # –∏ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏
            if config_obj:
                products_count = check_products_amount(config_obj)
                # –∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ + –≤–∫–ª—é—á–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è + –æ–Ω–∞ –Ω–µ –≤—ã–∫–ª—é—á–µ–Ω–∞ –≤
                # —Å–∞–º–æ–º –ª–æ—Ç–µ –≤ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ - –æ—Ç–∫–ª—é—á–∞–µ–º.
                if all((not products_count, cardinal.MAIN_CFG["FunPay"].getboolean("autoDisable"),
                        config_obj.get("disableAutoDisable") in ["0", None])):
                    current_task = -1

        if current_task:
            result = update_lot_state(cardinal, lot, current_task)
            if result:
                if current_task == -1:
                    deactivated.append(lot.description)
                elif current_task == 1:
                    restored.append(lot.description)
            time.sleep(0.5)

    if deactivated:
        lots = "\n".join(deactivated)
        text = f"""üî¥ <b>–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–æ—Ç—ã:</b>
        
<code>{lots}</code>"""
        Thread(target=cardinal.telegram.send_notification, args=(text, ),
               kwargs={"notification_type": utils.NotificationTypes.lots_deactivate}, daemon=True).start()
    if restored:
        lots = "\n".join(restored)
        text = f"""üü¢ <b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–æ—Ç—ã:</b>

<code>{lots}</code>"""
        Thread(target=cardinal.telegram.send_notification, args=(text,),
               kwargs={"notification_type": utils.NotificationTypes.lots_restore}, daemon=True).start()
    cardinal.last_state_change_tag = event.runner_tag


def update_lots_state_handler(cardinal: Cardinal, event: NewOrderEvent, *args):
    Thread(target=update_lots_states, args=(cardinal, event), daemon=True).start()


# BIND_TO_ORDER_STATUS_CHANGED
def send_thank_u_message_handler(cardinal: Cardinal, event: OrderStatusChangedEvent):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
    """
    if not cardinal.MAIN_CFG["OrderConfirm"].getboolean("sendReply"):
        return
    if not event.order.status == types.OrderStatuses.CLOSED:
        return

    text = cardinal.MAIN_CFG["OrderConfirm"]["replyText"]
    chat = cardinal.account.get_chat_by_name(event.order.buyer_username, True)
    text = cardinal_tools.format_order_text(text, event.order)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %YELLOW{event.order.buyer_username}$RESET –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ "
                f"$YELLOW{event.order.id}.$RESET")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ...")
    Thread(target=cardinal.send_message, args=(chat.id, text, event.order.buyer_username), daemon=True).start()


def send_order_confirmed_notification_handler(cardinal: Cardinal, event: OrderStatusChangedEvent):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram.
    """
    if not event.order.status == types.OrderStatuses.CLOSED:
        return

    chat = cardinal.account.get_chat_by_name(event.order.buyer_username, True)
    Thread(target=cardinal.telegram.send_notification,
           args=(f"""ü™ô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="https://funpay.com/chat/?node={chat.id}">{event.order.buyer_username}</a> """
                 f"""–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ <code>{event.order.id}</code>.""",
                 keyboards.new_order(event.order.id, event.order.buyer_username, chat.id),
                 utils.NotificationTypes.order_confirmed),
           daemon=True).start()


# REGISTER_TO_POST_START
def send_bot_started_notification_handler(cardinal: Cardinal, *args) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.
    """
    if cardinal.telegram is None:
        return

    if cardinal.account.currency is None:
        curr = ""
    else:
        curr = cardinal.account.currency
    text = f"""‚úÖ <b><u>FunPay Cardinal –∑–∞–ø—É—â–µ–Ω!</u></b>

üëë <b><i>–ê–∫–∫–∞—É–Ω—Ç:</i></b>  <code>{cardinal.account.username}</code> | <code>{cardinal.account.id}</code>
üí∞ <b><i>–ë–∞–ª–∞–Ω—Å:</i></b> <code>{cardinal.account.balance}{curr}</code>
üìä <b><i>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:</i></b>  <code>{cardinal.account.active_sales}</code>"""

    for i in cardinal.telegram.init_messages:
        try:
            cardinal.telegram.bot.edit_message_text(text, i[0], i[1])
        except:
            continue


BIND_TO_INIT_MESSAGE = [save_already_exists_chat_handler]

BIND_TO_NEW_MESSAGE = [log_msg_handler,
                       send_greetings_handler,
                       add_old_user_handler,
                       send_response_handler,
                       process_review,
                       send_new_message_notification_handler,
                       send_command_notification_handler,
                       test_auto_delivery_handler]

BIND_TO_POST_LOTS_RAISE = [send_categories_raised_notification_handler]

BIND_TO_ORDERS_LIST_CHANGED = [update_current_lots_handler]

BIND_TO_NEW_ORDER = [log_new_order_handler, send_new_order_notification_handler, deliver_product_handler,
                     update_lots_state_handler]

BIND_TO_ORDER_STATUS_CHANGED = [send_thank_u_message_handler, send_order_confirmed_notification_handler]

BIND_TO_POST_DELIVERY = [send_delivery_notification_handler]

BIND_TO_POST_START = [send_bot_started_notification_handler]
